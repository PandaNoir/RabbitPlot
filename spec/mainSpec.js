// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  describe('test', function() {
    var $httpBackend;
    $httpBackend = "unknown";
    beforeEach(module('rabbit'));
    beforeEach(inject(function(_$httpBackend_, _user_, _localStorageService_) {
      var database, localStorageService, ref, user;
      ref = [_user_, _$httpBackend_, _localStorageService_], user = ref[0], $httpBackend = ref[1], localStorageService = ref[2];
      database = 'http://www40.atpages.jp/chatblanc/genderC/database.php';
      localStorageService.clearAll();
      $httpBackend.whenPOST(database, "type=permission&groupID=&userID=" + user.id).respond('[]');
      $httpBackend.whenPOST(database, 'type=namelist').respond('[["\\"test group\\"","\\"test group2\\""]]');
      $httpBackend.whenPOST(database, function(s) {
        return s.indexOf('type=list') !== -1;
      }).respond('[{"name":"\\"test group\\"","event":"[]","habit":"[]","id":"1"}]');
      $httpBackend.whenPOST(database, function(s) {
        return s.indexOf('id=2') !== -1;
      }).respond(201, '');
      $httpBackend.whenPOST(database, function(s) {
        return s.indexOf('type=updateUser') !== -1;
      }).respond('');
    }));
    describe('execSelector()', function() {
      var OVER_MONTH, _, calendar, execSelectors, f, month, year;
      year = month = f = calendar = OVER_MONTH = execSelectors = _ = "unknown";
      beforeEach(inject(function(_calendar_, _OVER_MONTH_, ___) {
        var ref;
        ref = [_calendar_, _OVER_MONTH_, ___], calendar = ref[0], OVER_MONTH = ref[1], _ = ref[2];
        execSelectors = calendar.execSelectors;
        year = 2012;
        month = 2 - 1;
      }));
      it('date selector', function() {
        expect(execSelectors('date:3', year, month)).toEqual([3]);
        expect(execSelectors('date:vernal-equinox-day', year, 2)).toEqual([20]);
        expect(execSelectors('date:autumnal-equinox-day', year, 8)).toEqual([22]);
        expect(execSelectors('date:full-moon-night', year, 8)).toEqual([30]);
      });
      it('day selector', function() {
        expect(execSelectors('day:wed', year, month)).toEqual([1, 8, 15, 22, 29]);
        expect(execSelectors('day:2nd-wed', year, month)).toEqual([8]);
        expect(execSelectors('day:last-wed', year, month)).toEqual([29]);
      });
      it('is selector', function() {
        expect(execSelectors('is:public-holiday', year, month)).toEqual([11]);
      });
      it('month selector', function() {
        var all_days;
        all_days = calendar.calendar(year, month, true);
        expect(execSelectors('month:2', year, month)).toEqual(all_days);
        expect(execSelectors('month:3', year, month)).toEqual([]);
      });
      it('range selector', function() {
        expect(execSelectors("range:" + year + "/2/11.." + year + "/2/14", year, month)).toEqual([11, 12, 13, 14]);
        expect(execSelectors("range:" + (year + 1) + "/2/11.." + (year + 1) + "/2/14", year, month)).toEqual([]);
        expect(execSelectors('range:2/11...2/14', year, month)).toEqual([11, 12, 13, 14]);
        expect(execSelectors('range:2/11..2/14', year, month)).toEqual([11, 12, 13, 14]);
        expect(execSelectors('range:12/29...1/3', year, 12 - 1)).toEqual([29, 30, 31]);
        expect(execSelectors('range:12/29...1/3', year, 1 - 1)).toEqual([1, 2, 3]);
      });
      it('year selector', function() {
        var all_days;
        all_days = calendar.calendar(year, month, true);
        expect(execSelectors("year:" + (year + 1), year, month)).toEqual([]);
        expect(execSelectors("year:" + year, year, month)).toEqual(all_days);
        expect(execSelectors('year:leap-year', year, month)).toEqual(all_days);
        expect(execSelectors('year:leap-year', year + 1, month)).toEqual([]);
      });
      it('yesterday selector', function() {
        expect(execSelectors('yesterday:date:4', year, month)).toEqual([5]);
      });
      return it('national holiday', inject(function(_eventCal_) {
        var eventCal, i, len, val, years;
        eventCal = _eventCal_;
        expect(_.map(eventCal.getEvents(0, 1986, 5 - 1), function(item) {
          return item.name;
        })).not.toContain('[mes]国民の休日');
        expect(_.map(eventCal.getEvents(0, 1987, 5 - 1), function(item) {
          return item.name;
        })).not.toContain('[mes]国民の休日');
        years = [1988, 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005, 2006];
        for (i = 0, len = years.length; i < len; i++) {
          val = years[i];
          expect(_.map(eventCal.getEvents(0, val, 5 - 1), function(item) {
            return item.name;
          })).toContain('[mes]国民の休日');
        }
      }));
    });
    describe('splitSelector()', function() {
      var LPARENTHESES, OPERATOR, OTHERS, RPARENTHESES, calendar;
      OPERATOR = OTHERS = LPARENTHESES = RPARENTHESES = calendar = "unknown";
      beforeEach(inject(function(_calendar_, _ATTRIBUTE_) {
        OPERATOR = _ATTRIBUTE_.OPERATOR, OTHERS = _ATTRIBUTE_.OTHERS, LPARENTHESES = _ATTRIBUTE_.LPARENTHESES, RPARENTHESES = _ATTRIBUTE_.RPARENTHESES;
        calendar = _calendar_;
      }));
      it('should attach OTHERS to "key:value"', function() {
        expect(calendar.splitSelector('key:value')).toEqual([['key:value', OTHERS]]);
      });
      it('should attach OPERATOR to "and"', function() {
        expect(calendar.splitSelector('key:value かつ key:value')).toEqual([['key:value', OTHERS], ['&&', OPERATOR], ['key:value', OTHERS]]);
        expect(calendar.splitSelector('key:value && key:value')).toEqual([['key:value', OTHERS], ['&&', OPERATOR], ['key:value', OTHERS]]);
        expect(calendar.splitSelector('key:value and key:value')).toEqual([['key:value', OTHERS], ['&&', OPERATOR], ['key:value', OTHERS]]);
        expect(calendar.splitSelector('key:value key:value')).toEqual([['key:value', OTHERS], ['&&', OPERATOR], ['key:value', OTHERS]]);
      });
      it('should attach OPERATOR to "or"', function() {
        expect(calendar.splitSelector('key:value または key:value')).toEqual([['key:value', OTHERS], ['||', OPERATOR], ['key:value', OTHERS]]);
        expect(calendar.splitSelector('key:value || key:value')).toEqual([['key:value', OTHERS], ['||', OPERATOR], ['key:value', OTHERS]]);
        expect(calendar.splitSelector('key:value or key:value')).toEqual([['key:value', OTHERS], ['||', OPERATOR], ['key:value', OTHERS]]);
      });
      it('should attach LPARENTHESES to "(" and attach RPARENTHESES to ")"', function() {
        expect(calendar.splitSelector('(key:value and key:value) and key:value')).toEqual([['(', LPARENTHESES], ['key:value', OTHERS], ['&&', OPERATOR], ['key:value', OTHERS], [')', RPARENTHESES], ['&&', OPERATOR], ['key:value', OTHERS]]);
      });
    });
    describe('calendar.calendar()', function() {
      it('should be real calendar.', inject(function(calendar, OVER_MONTH) {
        var i, results;
        expect(JSON.stringify(calendar.calendar(2014, 2 - 1))).toEqual(JSON.stringify([[0, 0, 0, 0, 0, 0, 1], [2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, OVER_MONTH]]));
        expect(_.flatten(calendar.calendar(2014, 2 - 1))).toEqual([0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, OVER_MONTH]);
        expect(calendar.calendar(2014, 2 - 1, true)).toEqual((function() {
          results = [];
          for (i = 1; i <= 28; i++){ results.push(i); }
          return results;
        }).apply(this));
      }));
    });
    describe('switchToEdit()', function() {
      var eventForm, group, mode;
      mode = eventForm = group = "unknown";
      beforeEach(inject(function(_mode_, _eventForm_, _group_) {
        var ref;
        ref = [_mode_, _eventForm_, _group_], mode = ref[0], eventForm = ref[1], group = ref[2];
        group[0].event = [
          {
            year: 2015,
            month: 1,
            date: 14,
            name: '[mes]バレンタイン'
          }
        ];
      }));
      it('should initialize eventForm correctly when switching to edit with add mode with date.', function() {
        mode.switchToEdit(2015, 2 - 1, 14);
        expect(eventForm).toEqual({
          name: '',
          year: 2015,
          month: 2,
          date: 14,
          type: 'event',
          rule: '',
          mode: 'add',
          id: 0
        });
      });
      it('should initialize eventForm correctly when switching to edit mode with edit event mode.', function() {
        mode.switchToEdit('0:0:event');
        expect(eventForm).toEqual({
          name: group[0].event[0].name.replace(/^\[mes\]/, ''),
          year: group[0].event[0].year,
          month: group[0].event[0].month + 1,
          date: group[0].event[0].date,
          type: 'event',
          rule: '',
          mode: 'edit',
          id: 0,
          selectedGroup: 0,
          isMessage: true
        });
      });
      it('should initialize eventForm correctly when switching to edit mode with edit event mode.', function() {
        mode.switchToEdit('0:0:event', true);
        expect(eventForm).toEqual({
          name: group[0].event[0].name.replace(/^\[mes\]/, ''),
          year: group[0].event[0].year,
          month: group[0].event[0].month + 1,
          date: group[0].event[0].date,
          type: 'event',
          rule: '',
          mode: 'add',
          id: 0,
          selectedGroup: 0,
          isMessage: true
        });
      });
    });
    describe('add group', function() {
      var GroupEditorCtrl, SettingCtrl, groupScope, settingScope;
      settingScope = groupScope = SettingCtrl = GroupEditorCtrl = "unknown";
      beforeEach(inject(function($controller, $rootScope, user) {
        settingScope = $rootScope.$new();
        SettingCtrl = $controller('settingCtrl', {
          $scope: settingScope
        });
        groupScope = $rootScope.$new();
        GroupEditorCtrl = $controller('groupEditorCtrl', {
          $scope: groupScope
        });
      }));
      it('start group making.', inject(function(mode, _groupForm_, group) {
        var groupForm;
        groupForm = _groupForm_;
        $httpBackend.flush();
        expect(group.length).toBe(2);
        settingScope.makeGroup();
        expect(mode.editsGroup).toBe(true);
        groupForm.name = 'hoge';
        groupScope.addGroup();
        expect(group.length).toBe(3);
        expect(group[2].name).toBe('hoge');
      }));
    });
    describe('directive', function() {
      describe('appDate', function() {
        var $compile, $rootScope, calendar;
        $compile = $rootScope = calendar = "unknown";
        beforeEach(inject(function(_$compile_, _$rootScope_, _calendar_) {
          var ref;
          ref = [_$compile_, _$rootScope_, _calendar_], $compile = ref[0], $rootScope = ref[1], calendar = ref[2];
          calendar.selected = 21;
          calendar.year = 2015;
          calendar.month = 2 - 1;
          calendar.date = 14;
          calendar.today = {
            year: 2015,
            month: 2 - 1,
            date: 14
          };
        }));
        it('select', function() {
          var element;
          element = $compile('<span app-date="0" app-row="[1,2,3,4,5,6,7]"></span>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('1');
          expect(element.attr('class').split(' ')).not.toContain('selected');
          element.triggerHandler('click');
          expect(element.attr('class').split(' ')).toContain('selected');
        });
      });
    });
    describe('user', function() {
      var localStorageService, user;
      user = localStorageService = "unknown";
      beforeEach(inject(function(_user_, _localStorageService_) {
        var ref;
        ref = [_user_, _localStorageService_], user = ref[0], localStorageService = ref[1];
      }));
      it('initialize', function() {
        expect(user.following).toEqual([]);
        expect(user['private'].event).toEqual([]);
        expect(user['private'].habit).toEqual([]);
        expect(user['private'].name).toBe('プライベート');
        expect(user.permission).toEqual([]);
        expect(user.hiddenGroup).toEqual([]);
        expect(user.isLoggedIn).toBe(false);
        expect(user.updated).toBe(true);
      });
      it('cache should save user data.', function() {
        var cachedUser, copiedUser;
        user.save();
        cachedUser = localStorageService.get('private');
        copiedUser = _.clone(user);
        delete copiedUser.permission;
        delete copiedUser.updated;
        delete copiedUser.isHiddenGroup;
        delete copiedUser.save;
        delete copiedUser.hasPermission;
        delete copiedUser.follow;
        expect(cachedUser).toEqual(copiedUser);
      });
    });
  });

}).call(this);
